/*!
 * /**
 *  * MSDropdown - dd.js
 *  * @author: Marghoob Suleman
 *  * @website: https://www.marghoobsuleman.com/
 *  * @version: 4.0.2
 *  * @date: Sat Jun 25 2022 16:18:05 GMT-0500 (Central Daylight Time)
 *  * msDropdown is free web component: you can redistribute it and/or modify
 *  * it under the terms of the either the MIT License or the Gnu General Public License (GPL) Version 2
 *  * /
 */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_dd_webcomponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/dd-webcomponent */ \"./src/js/lib/dd-webcomponent.js\");\n/* harmony import */ var _lib_dd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/dd */ \"./src/js/lib/dd.js\");\n\n\nwindow.MsDropdown = _lib_dd__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n\n\n(function () {\n    let isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') > -1 && navigator.userAgent && navigator.userAgent.indexOf('CriOS') == -1 && navigator.userAgent.indexOf('FxiOS') == -1;\n    if(isSafari) {\n        _lib_dd__WEBPACK_IMPORTED_MODULE_1__[\"default\"].make(\"select[is='ms-dropdown']\");\n        /**\n         * Not a good idea to override this\n         * but if you want to use document.createElement(\"select\"); this can be enable for safari.\n         * how to use:\n         * var select = document.createElement(\"select\", {is:'ms-dropdown'});\n         * select.setAttribute(\"is\", \"ms-dropdown\");\n         * select.options[0] = new Option(\"Hashtag CMS\", \"https://www.hashtagcms.org\"); // add an option\n         * select.options[1] = new Option(\"My Website\", \"https://www.marghoobsuleman.com\"); // add an option\n         * document.body.appendChild(select);\n         */\n\n        /*\n        window.addEventListener(\"load\", ()=> {\n            let OriginalAppendChild = Element.prototype.appendChild;\n            Element.prototype.appendChild = function() {\n                OriginalAppendChild.apply(this, arguments);\n                let select = arguments[0];\n                if(select.nodeName === \"SELECT\" && select.getAttribute(\"is\") === \"ms-dropdown\") {\n                    select.msDropdown = new MsDropdown(select);\n                }\n            };\n\n        })\n         */\n\n    }\n})();\n\n\n//# sourceURL=webpack://ms-dropdown/./src/js/index.js?");

/***/ }),

/***/ "./src/js/lib/dd-webcomponent.js":
/*!***************************************!*\
  !*** ./src/js/lib/dd-webcomponent.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dd */ \"./src/js/lib/dd.js\");\n\n\nclass dd extends HTMLSelectElement {\n\n    constructor(element, settings) {\n        super();\n    }\n\n\n    connectedCallback() {\n        setTimeout(()=> {\n            if(!this.msDropdown) {\n                this.msDropdown = new _dd__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n            }\n            try {\n                this.addEventListener(\"change\", (evt)=> {if(!this.multiple) {\n                    this.msDropdown.selectedIndex = this.selectedIndex;\n                } else {\n                    this.msDropdown.refresh();\n                }\n                });\n\n            } catch (e) {\n                console.log(e.message);\n            }\n        },1);\n    }\n\n    disconnectedCallback() {\n       // console.log('disconnectedCallback');\n    }\n\n    adoptedCallback() {\n        //console.log('adoptedCallback', this);\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if(this.msDropdown) {\n            if(name.indexOf(\"data-\") !== -1) {\n                name = name.replace(\"data-\", \"\");\n                let nameStr = name.toLowerCase().split('-');\n                for (let i = 1; i < nameStr.length; i++) {\n                    nameStr[i] = nameStr[i].charAt(0).toUpperCase() + nameStr[i].substring(1);\n                }\n                this.msDropdown.setSettingAttribute(nameStr.join(\"\"), newValue, true); //update settings and refresh\n            } else {\n                //this.msDropdown[name] = newValue;\n            }\n\n        }\n        console.log('attributeChangedCallback');\n\n    }\n\n    static get observedAttributes() { return [\n        'data-main-css',\n        'data-show-icon',\n        'data-event',\n        'data-child-width',\n        'data-child-height',\n        'data-enable-checkbox',\n        'data-checkbox-name-suffix',\n        'data-enable-auto-filter',\n        'data-visible-rows',\n        'data-show-plus-item-counter',\n        'data-error-message',\n        'data-show-filter-always',\n        'data-show-list-counter',\n        'data-image-position'\n    ];\n    }\n\n}\n\ncustomElements.define('ms-dropdown', dd, {extends:'select'});\n\n//# sourceURL=webpack://ms-dropdown/./src/js/lib/dd-webcomponent.js?");

/***/ }),

/***/ "./src/js/lib/dd.js":
/*!**************************!*\
  !*** ./src/js/lib/dd.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MsDropdown)\n/* harmony export */ });\n/* harmony import */ var _ddmaker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ddmaker */ \"./src/js/lib/ddmaker.js\");\n/**\n * MSDropdown - dd.js\n * @author: Marghoob Suleman\n * @website: https://www.marghoobsuleman.com/\n * @version: 4.0.3\n * @revision: 6\n * @date: 5th Sep 2021\n * msDropdown is free web component: you can redistribute it and/or modify\n * it under the terms of the either the MIT License or the Gnu General Public License (GPL) Version 2\n */\n\n\n\nclass MsDropdown {\n\n    constructor(ele, settings) {\n        if(typeof ele === \"string\") {\n            document.querySelectorAll(ele).forEach((current)=> {\n                new MsDropdown(current,settings);\n            });\n        } else {\n            ele.msDropdown = this;\n            this._ddMaker = new _ddmaker__WEBPACK_IMPORTED_MODULE_0__[\"default\"](ele, settings);\n        }\n    }\n    /*****************  Public methods and props ***********/\n\n    /**\n     * Set setting attributes\n     * @param key\n     * @param value\n     * @param shouldRefresh\n     */\n    setSettingAttribute(key, value, shouldRefresh=false) {\n        this._ddMaker.setSettingAttribute(key, value);\n        if(shouldRefresh) {\n            this._ddMaker.refresh();\n        }\n    }\n     /**\n     * Add an item to select\n     * Object can be pass as below\n     * new Option(\"Label\", \"value\") or\n     * {text:\"Label\", value:\"value\"}\n     * or Label as string\n     * or full object ie {text:\"\", value:\"\", description:'', image:'', className:'' title:'', imageCss:''}\n     * @param obj {option | object}\n     * @param index {int}\n     */\n    add(obj, index) {\n        this._ddMaker.add(obj, index);\n    }\n\n    /**\n     * Remove an item from select\n     * @param index {int}\n     */\n    remove(index) {\n        return this._ddMaker.remove(index);\n    }\n\n    /**\n     * Move to next index\n     */\n    next() {\n        this._ddMaker.next();\n    }\n\n\n    /**\n     * Move to previous index\n     */\n    previous() {\n        this._ddMaker.previous();\n    }\n\n    /**\n     * Open this dropdown\n     */\n    open() {\n        this._ddMaker.open(null, false);\n    }\n\n    /**\n     * Close this dropdown\n     */\n    close() {\n        this._ddMaker.close(null);\n    }\n\n    /**\n     * Return named item element with data\n     * @param name {string}\n     * @param withData\n     */\n    namedItem(name, withData=false) {\n        return this._ddMaker.namedItem(name, withData);\n    }\n\n    /**\n     * Get data by index\n     * @param index {int}\n     * @param withData\n     */\n    item(index, withData=false) {\n        return this._ddMaker.item(index, withData);\n    }\n\n    /**\n     * Show hide or get status of visibility\n     * @param isShow\n     * @return {boolean}\n     */\n    visible(isShow=null) {\n        return this._ddMaker.visible(isShow);\n    }\n\n    /**\n     * Calculate item height and set child height\n     * @param numberOfRows {int}\n     */\n    showRows(numberOfRows) {\n        this._ddMaker.showRows(numberOfRows);\n    }\n\n    /**\n     * Alias of showRows\n     * @param numberOfRows {int}\n     */\n    visibleRows(numberOfRows) {\n        this._ddMaker.showRows(numberOfRows);\n    }\n\n    /**\n     * Add event listener\n     * @param type {string}\n     * @param fn {function}\n     */\n    on(type, fn) {\n        this._ddMaker.on(type, fn);\n    }\n\n    /**\n     * Remove event listener\n     * @param type {string}\n     * @param fn {function}\n     */\n    off(type, fn) {\n        this._ddMaker.off(type, fn);\n    };\n\n    /**\n     * update ui and value\n     */\n    updateUiAndValue() {\n        this._ddMaker.updateUiAndValue();\n    }\n\n    /**\n     * Remake msDropdown\n     */\n    refresh() {\n        this._ddMaker.refresh();\n    }\n    /**\n     * Remove msDropdown\n     */\n    destroy() {\n        this._ddMaker.destroy();\n    }\n\n    /*** Props ***/\n    /**\n     * Get selected index\n     * @return {int}\n     */\n    get selectedIndex() {\n        return this._ddMaker.selectedIndex;\n    }\n\n    /**\n     * Set Index\n     * @param index {int}\n     */\n    set selectedIndex(index) {\n        this._ddMaker.selectedIndex = index;\n    }\n\n    /**\n     * Get options\n     * @return {HTMLOptionElement}\n     */\n    get options() {\n        return this._ddMaker.options;\n    }\n\n    /**\n     * Set options length\n     * @param option {int | HTMLOptionElement}\n     */\n    set options(option) {\n        this._ddMaker.options = option;\n    }\n\n    /**\n     * get options UI\n     * @return {NodeList}\n     */\n    get optionsUI() {\n        return this._ddMaker.optionsUI;\n    }\n\n    /**\n     * Get length\n     * @return {int}\n     */\n    get length() {\n        return this._ddMaker.length;\n    }\n\n    /**\n     * Set length\n     * @param size {int}\n     */\n    set length(size) {\n        this._ddMaker.length = size;\n    }\n\n\n    /**\n     * Get value\n     * @return {string | any}\n     */\n    get value() {\n        return this._ddMaker.value;\n    }\n\n    /**\n     * Set value\n     * @param val {string | any}\n     */\n    set value(val) {\n        this._ddMaker.value = val;\n    }\n\n    /**\n     * get selected text\n     * @return {string}\n     */\n    get selectedText() {\n        return this._ddMaker.selectedText;\n    }\n\n    /**\n     * Check if this is disabled\n     * @return {boolean}\n     */\n    get disabled() {\n        return this._ddMaker.disabled;\n    }\n\n    /**\n     * Set disabled\n     * @param val {boolean}\n     */\n    set disabled(val) {\n        this._ddMaker.disabled = val;\n    }\n\n    /**\n     * Get form name if this is inside a form\n     * @return {string}\n     */\n    get form() {\n        return this._ddMaker.form;\n    }\n\n\n    /**\n     * Get multiple\n     * @return {boolean}\n     */\n    get multiple() {\n        return this._ddMaker.multiple;\n    }\n\n    /**\n     * Set multiple\n     * @param val {boolean}\n     */\n    set multiple(val) {\n        this._ddMaker.multiple = val;\n    }\n\n    /**\n     * Get the name\n     * @return {string}\n     */\n    get name() {\n        return this._ddMaker.name;\n    }\n\n    /**\n     * Set the name\n     * @param val {string}\n     */\n    set name(val) {\n        this._ddMaker.name = val;\n    }\n\n    /**\n     * Get required\n     * @return {boolean}\n     */\n    get required() {\n        return this._ddMaker.required;\n    }\n\n    /**\n     * Set required\n     * @param val {boolean}\n     */\n    set required(val) {\n        this._ddMaker.required = val;\n    }\n\n    /**\n     * return the size/height of the dropdown\n     * @return {int}\n     */\n    get size() {\n        return this._ddMaker.size;\n    }\n\n    /**\n     * Change the height of the element\n     * @param val {int}\n     */\n    set size(val) {\n        this._ddMaker.size = val;\n    }\n\n\n    /**\n     * Get selected option\n     * @return {HTMLOptionElement}\n     */\n    get selectedOptions() {\n        return this._ddMaker.selectedOptions;\n    }\n\n    /**\n     * Get element children\n     * @return {HTMLCollection}\n     */\n    get children() {\n        return this._ddMaker.children;\n    }\n\n    /**\n     * Get selected ui data\n     * @return {object | {data: *, ui: *, index: *, option: *}}\n     */\n    get uiData() {\n        return this._ddMaker.uiData;\n    }\n\n\n    /**\n     * Make dropdown\n     * @param ele\n     * @param settings\n     */\n    static make(ele, settings) {\n        if(!ele.msDropdown) {\n            try {\n                let ddSelect = new MsDropdown(ele, settings);\n                ele.addEventListener(\"change\", ()=> {\n                    if(!ele.multiple) {\n                        ele.msDropdown.selectedIndex = current.selectedIndex;\n                    } else {\n                        ele.msDropdown.refresh();\n                    }\n                });\n                return ddSelect;\n            } catch (e) {\n                console.log(e.message);\n            }\n        }\n    }\n\n    /**\n     * Get version\n     * @return {string}\n     */\n    static get version() {\n        return \"4.0.3\";\n    }\n\n    /**\n     * Get author\n     * @return {string}\n     */\n    static get author() {\n        return \"Marghoob Suleman\";\n    }\n\n}\n\n\n\n//# sourceURL=webpack://ms-dropdown/./src/js/lib/dd.js?");

/***/ }),

/***/ "./src/js/lib/ddmaker.js":
/*!*******************************!*\
  !*** ./src/js/lib/ddmaker.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ddMaker)\n/* harmony export */ });\n/**\n * MSDropdown - ddmaker.js\n * @author: Marghoob Suleman\n * @website: https://www.marghoobsuleman.com/\n * @version: 4.0.3\n * @revision: 6\n * @date: 21st Sep 2021\n * msDropdown is free web component: you can redistribute it and/or modify\n * it under the terms of the either the MIT License or the Gnu General Public License (GPL) Version 2\n */\n\nlet _oldC = null;\nclass ddMaker {\n\n    constructor(ele, settings) {\n        let defaultSettings = {\n            byJson: {\n                data: null, selectedIndex: 0, name: null,\n                size: 0, multiple: false, width: 250\n                },\n            mainCss: 'ms-dd',\n            rowHeight: null,\n            visibleRows: null,\n            showIcon: true,\n            zIndex: 9999,\n            event:'click',\n            style: '',\n            childWidth:null,\n            childHeight:null,\n            enableCheckbox:false, //this needs to be multiple or it will set the element to multiple\n            checkboxNameSuffix:'_mscheck',\n            showPlusItemCounter:true,\n            enableAutoFilter:true,\n            showFilterAlways:false,\n            showListCounter:false,\n            imagePosition:'left',\n            errorMessage:'Please select an item from this list',\n            on: {create: null,open: null,close: null,add: null,remove: null,change: null,blur: null,click: null,dblclick: null,mousemove: null,mouseover: null,mouseout: null,focus: null,mousedown: null,mouseup: null}\n        };\n        this.ele = ele;\n        //merge with data settings\n        this._settings = {...defaultSettings, ...settings};\n        this._css = {};\n        this._onDocumentClick = null; this._onDocumentKeyDown = null; this._onDocumentKeyUp = null;\n        this._isOpen = false;\n        this._DOWN_ARROW = 40; this._UP_ARROW = 38; this._LEFT_ARROW=37; this._RIGHT_ARROW=39;\n        this._ESCAPE = 27; this._ENTER = 13; this._ALPHABETS_START = 47; this._SHIFT=16;\n        this._CONTROL = 17; this._MAC_CONTROL = 91; this._BACKSPACE=8; this._DELETE=46; this._SPACE=32;\n        this._shiftHolded = false; this._controlHolded = false;\n        this._isFirstTime = true; this._cacheEle = {};\n        this._isMouseDown = false; this._itemsArr = [];\n        \n        this._css = {dd:this._settings.mainCss+ \" ms-pr\",\n            wrapperDisabled:'disabled',\n            headerA:\"ms-list-option option-selected\",\n            header: 'ms-dd-header',\n            headerMiddleContent: 'ms-header-middle-content',\n            arrow: 'ms-dd-arrow',\n            arrowDown: 'ms-dd-pointer-down',\n            arrowUp: 'ms-dd-pointer-up',\n            headerCounter:'ms-header-counter',\n            listOfItems: 'ms-options',\n            itemContent:'ms-dd-option-content',\n            item: 'ms-list-option',\n            itemSpan:'ms-middle',\n            itemSpanOpt:'ms-optgroup-padding',\n            itemLabel:'ms-dd-label',\n            itemImage:'ms-dd-option-image',\n            itemDesc: 'ms-dd-desc',\n            itemSelected: 'option-selected',\n            itemDisabled:'disabled',\n            itemEnabled:'enabled',\n            optgroup: \"ms-optgroup\",\n            listCounter:'ms-list-counter',\n            valueInput:'ms-value-input',\n            checkbox:'ms-checkbox',\n            imageRight:'ico-align-right'\n        };\n\n        //init\n        this._wrapper = {};\n        this._createByJson();\n        this._checkDataSettings();\n        this._isList = (this.ele.size>1);\n        this._isMultiple =  this.ele.multiple;\n\n        this._enableCheckbox = this._settings.enableCheckbox;\n\n        if (this._isList || this._enableCheckbox.toString() === \"true\") {\n            this._isMultiple = this.ele.multiple = true;\n        }\n\n        this._isFilterApplied = false;\n        this._nexPrevCounter = 0;\n\n        this._init();\n\n    }\n\n    /**\n     * Init\n     * @private\n     */\n    _init() {\n        //console.log(this.name, this.selectedIndex)\n        this._makeLayout();\n\n        this._updateUiAndValueByIndex(this.selectedIndex);\n\n        if(this.ele.size > 1) {\n            this._makeUiAsList(true, this.ele.size);\n            this._scrollToItem();\n        }\n\n        //adjust child width\n        if(this._settings.childWidth !== null) {\n            this._wrapper.listOfItems.style.width = this._settings.childWidth;\n        }\n        //hide original\n        this._showHideOriginal(false);\n\n\n        if(this._settings.showFilterAlways.toString() === \"true\") {\n            this._settings.enableAutoFilter = true;\n            this._showHideFilterBox(true);\n        }\n\n        if(this.ele.autofocus) {\n            this._wrapper.holder.focus();\n            this._wrapper.filterInput.focus();\n        } else {\n            this._wrapper.filterInput.blur();\n        }\n\n        this.updateUiAndValue();\n\n        this._fireLocalEventIfExist(\"create\");\n        this._fireEventIfExist(\"onCreate\");\n    }\n\n    /**\n     * Show hide Original\n     * @param isShow\n     * @private\n     */\n    _showHideOriginal(isShow=true) {\n        if(isShow) {\n            this._show(this.ele);\n        } else {\n            this._hide(this.ele);\n        }\n\n    }\n\n    /**\n     * Check data settings.\n     * Read from select data-* attributes\n     * @private\n     */\n    _checkDataSettings() {\n        let dataSet = this._getDataSet(this.ele);\n        let settings = this._settings;\n        settings.mainCss = dataSet?.mainCss || settings.mainCss;\n        settings.showIcon = dataSet?.showIcon || settings.showIcon;\n        settings.event = dataSet?.event || settings.event;\n        settings.childWidth = dataSet?.childWidth || settings.childWidth;\n        settings.childHeight = dataSet?.childHeight || settings.childHeight;\n        settings.enableCheckbox = dataSet?.enableCheckbox || settings.enableCheckbox;\n        settings.checkboxNameSuffix = dataSet?.checkboxNameSuffix || settings.checkboxNameSuffix;\n        /*settings.append = dataSet.append || settings.append;\n        settings.prepend = dataSet.prepend || settings.prepend;*/\n        settings.enableAutoFilter = dataSet?.enableAutoFilter || settings.enableAutoFilter;\n        settings.visibleRows = dataSet?.visibleRows || settings.visibleRows;\n        settings.showPlusItemCounter = dataSet?.showPlusItemCounter || settings.showPlusItemCounter;\n        settings.errorMessage = dataSet?.errorMessage || settings.errorMessage;\n        settings.showFilterAlways = dataSet?.showFilterAlways || settings.showFilterAlways;\n        settings.showListCounter = dataSet?.showListCounter || settings.showListCounter;\n        settings.imagePosition = dataSet?.imagePosition || settings.imagePosition;\n\n        this._settings = {...this._settings, ...settings};\n\n    }\n\n    /**\n     * Set setting attribute\n     * @param key\n     * @param value\n     */\n    setSettingAttribute(key, value) {\n        this._settings[key] = value;\n    }\n\n\n    /**\n     * Create by json\n     * @private\n     */\n    _createByJson() {\n        if (this._settings.byJson.data) {\n            try {\n                let json = this._settings.byJson;\n                //this._settings.byJson.data = settings.byJson.data;\n                //change element\n                let obj = {};\n                obj.name = json.name || this.ele.id || \"\";\n                if (json.size>0) {\n                    obj.size = json.size;\n                }\n                if(json.multiple) {\n                    obj.multiple = json.multiple;\n                }\n\n                let oSelect = this._createEle(\"select\", obj);\n                let total = json.data.length;\n                for(let i=0;i<total;i++) {\n                    let current = json.data[i];\n                    let opt = new Option(current.text, current.value);\n                    if(current.disabled) {\n                        opt.disabled = true;\n                    }\n                    for(let p in current) {\n                        if (current.hasOwnProperty(p) && p.toLowerCase() !== 'text') {\n                            let key = `data-${p}`;\n                            key = key.replace(/([A-Z])/g, \"-$1\").toLowerCase(); //replace caps letter with -letter\n                            opt.setAttribute(key, current[p]);\n                        }\n                    }\n                    oSelect.options[i] = opt;\n                }\n                //add this\n                this.ele.appendChild(oSelect);\n\n                oSelect.selectedIndex = json.selectedIndex;\n                if(json.width) {\n                    this.ele.style.width = json.width+'px';\n                }\n\n                //now change element for the base ele\n                this.ele = oSelect;\n\n            } catch(e) {\n                throw \"There is an error in json data.\";\n            }\n        }\n    }\n\n    /**\n     * Scroll to item\n     * @param item\n     * @param behavior\n     */\n    _scrollToItem(item, behavior='smooth') {\n        item = item || this.uiData.ui;\n        if(item) {\n            item = item.length > 1 ? item[0] : item;\n            this._scrollToIfNeeded(item);\n        }\n    }\n\n    /**\n     * Show filter box\n     * @param isShow\n     * @private\n     */\n    _showHideFilterBox(isShow=true) {\n        if(isShow) {\n            this._show(this._wrapper.filterHolder);\n            this._wrapper.filterInput.focus();\n            if(this._settings.showFilterAlways.toString() === \"false\") {\n                this._hide(this._wrapper.headerA);\n            }\n        } else {\n            this._wrapper.filterInput.value = \"\";\n            this._hide(this._wrapper.filterHolder);\n            this._show(this._wrapper.headerA);\n        }\n\n    }\n\n    /**\n     * Apply filters\n     * @param e\n     * @private\n     */\n    _applyFilters(e) {\n        let sText = this._wrapper.filterInput.value;\n        if (sText.length === 0) {\n            this._show(this._wrapper.headerA);\n            this._makeChildren();\n            this._isFilterApplied = false;\n        } else {\n\n            if(this._settings.showFilterAlways.toString() === \"false\") {\n                this._hide(this._wrapper.headerA);\n            }\n            if(!this._isOpen) {\n                this.open(null);\n            }\n\n            //hide all\n            let options = [...this.options];\n            let filterOptions = options.filter(function(item) {\n                return item.nodeName !== \"OPTGROUP\" && item.disabled === false && item.text.toLowerCase().indexOf(sText.toLowerCase()) >= 0;\n            });\n            this._makeChildren(filterOptions);\n            this._isFilterApplied = true;\n            this._nexPrevCounter = -1;\n            this._scrollToIfNeeded(null, 0);\n        }\n\n    }\n\n    /**\n     * Make filter box\n     * @return {any}\n     * @private\n     */\n    _makeFilterBox() {\n        let div = this._createEle(\"div\", {className:'ms-filter-box'})\n        let input = this._createEle(\"input\", {type:\"text\"});\n        div.appendChild(input);\n        this._wrapper.filterInput = input;\n        this._wrapper.filterHolder = div;\n\n        this._bindEvents(input, \"input\", (evt)=> {\n            this._applyFilters(evt);\n        });\n\n        return div;\n    }\n\n    /**\n     * Make header\n     * @return {any}\n     * @private\n     */\n    _makeHeader() {\n        let css = this._css;\n        let divHeader = this._createEle(\"div\", {className:css.header});\n        let headerA = this._createEle(\"a\", {className:css.headerA});\n        let headerContent = this._createEle(\"span\", {className:css.headerMiddleContent});\n        let arrow = this._createEle(\"span\", {className:css.arrow + ' '+css.arrowDown});\n        headerA.appendChild(arrow);\n        headerA.appendChild(headerContent);\n        divHeader.appendChild(headerA);\n        this._wrapper.header = divHeader;\n        this._wrapper.headerA = headerA;\n        this._wrapper.headerContent = headerContent;\n        this._wrapper.arrow = arrow;\n\n        if(this._settings.imagePosition !== \"left\") {\n            headerA.classList.add(css.imageRight);\n        }\n\n        this._bindEvents(divHeader, this._settings.event, (evt)=> {\n            this.open(evt);\n        });\n\n        return divHeader;\n    }\n\n    /**\n     * Make children\n     * @param byOption\n     * @return {*}\n     * @private\n     */\n    _makeChildren(byOption=null) {\n        let css = this._css;\n        let isCheckbox = (this._enableCheckbox.toString() === \"true\");\n        let ul, $this=this;\n\n        /**\n         * Make Object\n         * @param opts\n         * @param counter\n         * @return {{opt: *, itemObj: *}}\n         * @private\n         */\n        let _makeObject = function (opts, counter) {\n            let opt = {};\n            opt = $this._parseOption(opts);\n            //{image, title, description, value, text, className, imageCss, index, selected, disabled}\n            let itemObj = {\n                label: {\n                    text:opt.text,\n                    css:css.itemLabel\n                },\n                img: {\n                    src:opt.image,\n                    css:css.itemImage\n                },\n                desc: {\n                    text:opt.description,\n                    css:css.itemDesc\n                },\n                isDisabled:(opts.disabled || false),\n                isSelected:(opts.selected || false),\n                isCheckbox:isCheckbox,\n                value:opt.value,\n                title:opt.title,\n                imageCss:`${opt.imageCss} ${opt.className}`,\n                counter:counter+1,\n                isOptGroup: (opts.nodeName === \"OPTGROUP\"),\n                innerSpanCss:css.itemContent\n            };\n            return {opt, itemObj};\n        };\n\n        /**\n         * Bind events\n         * @param li\n         * @param itemObj\n         */\n        let bindEvents = function (li, itemObj) {\n            if(!itemObj.isDisabled) {\n                $this._bindEvents(li, \"mouseup\", (evt)=> {\n\n                    $this._isMouseDown = false;\n                    if(!isCheckbox || evt.target.nodeName !== \"INPUT\") {\n                        if(!$this._isList) {\n                            $this.close(evt);\n                        }\n                    }\n                });\n\n                $this._bindEvents(li, \"mousedown\", (evt)=> {\n                    $this._isMouseDown = true;\n\n                    if(!isCheckbox || evt.target.nodeName !== \"INPUT\") {\n                        if($this._shiftHolded && $this._isMultiple) {\n                            //multiple select if shift is pressed\n                            let oldIndex = $this.selectedIndex;\n                            let newIndex = li.index;\n                            $this._setSelectedByIndexFromTo(oldIndex, newIndex);\n                        } else if($this._controlHolded && $this._isMultiple) {\n                            //select another one without resetting\n                            $this._setSelectedByItem(li, false, false);\n                        } else {\n                            //normal click\n                            $this._setSelectedByItemToggle(li._refCheckbox, li);\n                        }\n                    } else {\n                        //this is checkbox - make it toggle\n                        $this._setSelectedByItemToggle(li._refCheckbox, li);\n                    }\n                });\n\n                $this._bindEvents(li, \"mouseover\", (evt)=> {\n\n                    if($this._isMouseDown && $this._isMultiple) {\n                        $this._setSelectedByItem(li, false, false);\n                    }\n\n                });\n            }\n        };\n\n        \n        //use old one holder if required\n        if(!this._wrapper.listOfItems) {\n            ul = this._createEle(\"ul\", {className:css.listOfItems, zIndex: this._settings.zIndex});\n            this._wrapper.listOfItems = ul;\n        } else {\n            ul = this._wrapper.listOfItems;\n        }\n        ul.innerHTML = \"\"; //clear old one\n        let options = (byOption === null) ? this.ele.children : byOption;\n        let optLen = options.length;\n        for (let i=0;i<optLen;i++) {\n            let current = options[i];\n            let parseObj = _makeObject(current, i);\n            let opt = parseObj.opt;\n            let itemObj = parseObj.itemObj;\n            let li = this._createRow(itemObj);\n\n            if(opt.className !== '') {\n                li.className = li.className + \" \"+opt.className;\n            }\n            if(opt.internalStyle !== '') {\n                li.style = opt.internalStyle;\n            }\n\n            li.index = opt.index;\n            li.setAttribute(\"data-ms-index\", opt.index);\n                if(itemObj.isOptGroup) {\n                //let make children of optgroup\n                let c_options = current.children;\n                let c_optLen = c_options.length;\n                let ul2 = this._createEle(\"ul\");\n                for (let j=0;j<c_optLen;j++) {\n                    let c_current = c_options[j];\n                    let c_parseObj = _makeObject(c_current, j);\n                    let c_opt = c_parseObj.opt;\n                    let c_itemObj = c_parseObj.itemObj;\n                    let c_li = this._createRow(c_itemObj);\n\n                    if(c_opt.className !== '') {\n                        c_li.className = c_li.className + \" \"+c_opt.className;\n                    }\n                    if(c_opt.internalStyle !== '') {\n                        c_li.style = c_opt.internalStyle;\n                    }\n\n                    c_li.index = c_opt.index;\n                    c_li.setAttribute(\"data-ms-index\", c_opt.index);\n                    if(c_itemObj.isSelected) {\n                        this._setSelectedByItem(c_li, true);\n                    }\n                    bindEvents(c_li, c_itemObj);\n\n                    if(this._settings.imagePosition !== \"left\") {\n                        c_li.classList.add(css.imageRight);\n                    }\n                    ul2.appendChild(c_li);\n                }\n                li.appendChild(ul2);\n            }\n            if(!itemObj.isOptGroup) {\n                bindEvents(li, itemObj);\n            }\n            if(this._settings.imagePosition !== \"left\") {\n                li.classList.add(css.imageRight);\n            }\n            ul.appendChild(li);\n\n            if(itemObj.isSelected) {\n                this._setSelectedByItem(li, true);\n            }\n\n\n        }\n        if(this._settings.childHeight !== null) {\n            ul.style.maxHeight = this._settings.childHeight+'px';\n        }\n        return ul;\n    }\n\n    /**\n     * Make Layout\n     * @return {any}\n     * @private\n     */\n    _makeLayout() {\n        this.ele.tabIndex = -1;\n        let css = this._css;\n\n        let wrapper = this._createEle(\"div\", {tabIndex:0, className:css.dd});\n\n        let name = this.ele.name;\n        let isRequired = this.ele.required;\n\n        let valueBox = this._createEle(\"input\", {tabIndex:-1, name:name, type:\"text\", className:this._css.valueInput, required:isRequired});\n        wrapper.appendChild(valueBox);\n        this.ele.required = false;\n        this.ele.name = \"\";\n\n        //This is for multiple select\n        let moreValueBox = this._createEle(\"div\", {className:\"more\", style:\"display:none\"});\n        wrapper.appendChild(moreValueBox);\n\n        this._wrapper.valueBox = valueBox;\n        this._wrapper.moreValueBox = moreValueBox;\n\n\n        //Make header\n        let divHeader = this._makeHeader();\n\n        //Filter box\n        let filterBox = this._makeFilterBox();\n        divHeader.appendChild(filterBox);\n        this._showHideFilterBox(false);\n\n        //make options\n        let ul = this._makeChildren();\n        wrapper.appendChild(divHeader);\n        wrapper.appendChild(ul);\n\n        this._wrapper.holder = wrapper;\n\n\n        //add in document\n        this._insertAfter(wrapper, this.ele);\n\n        //hide children\n        this._hide(ul);\n\n        if(this.disabled) {\n            wrapper.classList.add(css.wrapperDisabled);\n        }\n\n        let style = this._getInternalStyle(this.ele);\n        wrapper.setAttribute(\"style\", style);\n\n        if(this._settings.byJson.data !== null) {\n            wrapper.setAttribute(\"style\", `width:${this._settings.byJson.width}px`);\n        }\n\n\n        //clear\n        let div = this._createEle(\"div\", {style:\"clear:both\"});\n        wrapper.appendChild(div);\n\n        this._bindEvents(this._wrapper.holder, \"focus\", (evt) => {\n            if(this._isList) {\n                this._bindDocumentEvents(null, false, true);\n            } else {\n                if(_oldC) {\n                    _oldC.close(null);\n                    _oldC = null;\n                }\n                this._bindDocumentEvents(null, true, true);\n                _oldC = this;\n            }\n            this._fireLocalEventIfExist(\"focus\");\n            this._fireEventIfExist(\"focus\");\n        });\n\n        this._bindEvents(this._wrapper.holder, \"blur\", (evt) => {\n            if(this._isList) {\n                this._unbindDocumentEvents();\n            }\n            this._fireLocalEventIfExist(\"blur\");\n            this._fireEventIfExist(\"blur\");\n        });\n\n        this._bindEvents(this._wrapper.holder, \"dblclick\", (evt) => {\n            this._fireLocalEventIfExist(\"blur\");\n            this._fireEventIfExist(\"blur\");\n        });\n\n        //For custom message on required\n        this._bindEvents(valueBox, \"invalid\", (evt)=> {\n            evt.target.setCustomValidity(\"\");\n            if (!evt.target.validity.valid) {\n                evt.target.setCustomValidity(this._settings.errorMessage);\n            }\n        });\n\n        this._bindEvents(valueBox, \"input\", (evt)=> {\n            evt.target.setCustomValidity(\"\");\n        });\n\n        let events = [\"click\", \"dblclick\", \"mousemove\", \"mouseover\", \"mouseout\", \"mousedown\", \"mouseup\"];\n        for (let i=0,len=events.length;i<len;i++) {\n            let evtName = events[i];\n            this._bindEvents(this._wrapper.holder, evtName, (evt) => {\n                this._fireLocalEventIfExist(evtName);\n                this._fireEventIfExist(evtName);\n            });\n\n        }\n\n        return wrapper;\n    }\n\n    /**\n     * Create a row\n     * @param obj\n     * @return {any}\n     */\n    _createRow(obj) {\n\n        let itemCss = (obj.isOptGroup) ? this._css.optgroup : this._css.item;\n\n        let li = this._createEle(\"li\", {className:itemCss});\n       if(obj.isCheckbox && !obj.isOptGroup) {\n            let checkbox = this._createEle(\"input\", {tabIndex:-1, className:this._css.checkbox,type:\"checkbox\", disabled:obj.isDisabled, \"checked\":false, value:obj.value, name:this._wrapper.valueBox.name+this._settings.checkboxNameSuffix+\"[]\"})\n            li.appendChild(checkbox);\n            li._refCheckbox = checkbox;\n        }\n\n        let optTxtCss = (obj.isOptGroup) ? \" \"+this._css.itemSpanOpt : \"\";\n\n        let itemSpan = this._createEle(\"span\", {className:this._css.itemSpan+optTxtCss});\n\n        let text = (this._settings.showListCounter.toString() === \"true\") ? `<span class='${this._css.listCounter}'>${obj.counter}</span> ${obj.label.text}` : obj.label.text;\n\n        let textSpan = this._createEle(\"span\", {className:obj.label.css}, text);\n\n        let itemInnerSpan = this._createEle(\"span\", {className:obj.innerSpanCss});\n        itemInnerSpan.appendChild(textSpan);\n\n        if(obj.img.src !== null) {\n            let img = this._createEle(\"img\", {className:obj.img.css, src:obj.img.src});\n            itemSpan.appendChild(img);\n        }\n\n        if(obj.img.src === null && obj.imageCss.replace(/\\s/g, '') !== '') {\n            let imgSpan = this._createEle(\"span\", {className:obj.img.css+' '+obj.imageCss}, \"&nbsp;\");\n            itemSpan.appendChild(imgSpan);\n        }\n\n        if(obj.desc.text !== null) {\n            let spanDesc = this._createEle(\"span\", {className:obj.desc.css}, obj.desc.text);\n            itemInnerSpan.appendChild(spanDesc);\n        }\n\n        itemSpan.appendChild(itemInnerSpan);\n\n\n\n        li.appendChild(itemSpan);\n        \n        if(obj.isDisabled) {\n            li.classList.add(this._css.itemDisabled);\n        } else if(!obj.isOptGroup) {\n            li.classList.add(this._css.itemEnabled);\n        }\n\n        if(obj.title !== '') {\n            li.title = obj.title;\n        }\n        return li;\n    }\n\n    /**\n     * Parse option\n     * @param opt\n     * @return {{image: *, description: *, index: *, className: *, disabled: *, text: *, imageCss: *, title: *, internalStyle: *, value: *, selected: *}}\n     * @private\n     */\n    _parseOption(opt) {\n\n        let image = null, title ='', description='', value='', text='', className='', imageCss = '', index=-1, selected, disabled, internalStyle;\n        if (opt !== undefined) {\n            let optionType = opt.nodeName;\n            let dataSet = opt.dataset;\n            if(optionType === \"OPTGROUP\") {\n                text = opt.label;\n            } else {\n                text = opt.text;\n                value = opt.value || text;\n            }\n            index = opt.index;\n            selected = opt.selected;\n            disabled = opt.disabled;\n\n            className = opt.className || \"\";\n            title = dataSet.title || '';\n            description = dataSet.description || '';\n            image = dataSet.image || image;\n            imageCss = dataSet.imageCss || '';\n            internalStyle = this._getInternalStyle(opt);\n\n        }\n\n        return {image, title, description, value, text, className, imageCss, index, selected, disabled, internalStyle};\n\n    }\n\n    /**\n     * remove old selected\n     * @private\n     */\n    _removeOldSelected() {\n        let oldSelected = this._getAllEle(\"ul li.\"+this._css.itemSelected, this._wrapper.holder);\n\n        //remove old selected\n        for(let i=0;i<oldSelected.length;i++) {\n            oldSelected[i].classList.remove(this._css.itemSelected);\n            if(this._isMultiple && this._enableCheckbox.toString() === \"true\") {\n                oldSelected[i]._refCheckbox.checked = false;\n                //this._getEle(\"input\", oldSelected[i]).checked = false;\n            }\n        }\n\n    }\n\n    /**\n     * Select by index a to b\n     * @param indexA\n     * @param indexB\n     * @private\n     */\n    _setSelectedByIndexFromTo(indexA, indexB) {\n\n        let min = Math.min(indexA, indexB);\n        let max = Math.max(indexA, indexB);\n        let options = this.optionsUI;\n\n        for(let i=min;i<=max;i++) {\n\n            this._setSelectedByItem(options[i], false, false);\n        }\n    }\n    /**\n     * Toggle Select\n     * @private\n     * @param checkbox\n     * @param li\n     */\n    _setSelectedByItemToggle(checkbox, li) {\n        let isChecked = !checkbox.checked;\n        let index = li.index;\n        if(isChecked) {\n            li.classList.add(this._css.itemSelected);\n            this.ele.options[index].selected = true;\n        } else {\n            li.classList.remove(this._css.itemSelected);\n            this.ele.options[index].selected = false;\n        }\n        this.updateUiAndValue();\n    }\n\n    /**\n     * Set selected by an item\n     * @param ele\n     * @param dontThink\n     * @param resetOldSelected\n     * @private\n     */\n    _setSelectedByItem(ele, dontThink=false, resetOldSelected=true) {\n\n        if(dontThink && ele) {\n\n            ele.classList.add(this._css.itemSelected);\n\n        } else {\n            let index = ele.index;\n\n            if(resetOldSelected === true) {\n                this._removeOldSelected();\n                this.ele.selectedIndex = index\n                //this.selectedIndex = index;\n            } else {\n                //it could be multiple\n                this.ele.options[index].selected = true;\n            }\n            ele?.classList?.add(this._css.itemSelected);\n            this.updateUiAndValue();\n        }\n        if(this._enableCheckbox.toString() === \"true\") {\n            if(ele?._refCheckbox) {\n                ele._refCheckbox.checked = true;\n            }\n        }\n        if(this._isFirstTime === false) {\n            this._fireLocalEventIfExist(\"change\");\n            this._fireEventIfExist(\"change\");\n        }\n        this._isFirstTime = false;\n    }\n\n    /**\n     * Set selected by an select option item\n     * @param option\n     * @param dontThink\n     * @private\n     */\n    _setSelectedByOptionItem(option, dontThink=false) {\n        let index = option.index;\n        let dataAndUI = this._getDataAndUI(index);\n        this._setSelectedByItem(dataAndUI.ui, dontThink);\n    }\n\n    /**\n     * Update header ui\n     * @param byData\n     * @param innerHTML\n     * @private\n     */\n    _updateHeaderUI(byData=null, innerHTML=null) {\n\n        let dataAndUI = (byData === null) ? this.uiData : byData;\n\n        let text = this._isArray(dataAndUI.index) ? dataAndUI.ui[0].innerHTML : null;\n\n        this._wrapper.headerContent.innerHTML = (innerHTML !== null) ? innerHTML : text || dataAndUI?.ui?.innerHTML || \"&nbsp;\";\n\n        let contentHolder = this._getEle(\".\"+this._css.itemLabel, this._wrapper.headerContent);\n\n        if(this._settings.showPlusItemCounter.toString() === \"true\" && dataAndUI.ui !== null && dataAndUI.ui.length > 1) {\n            contentHolder.innerHTML = contentHolder.innerHTML +  `<span class=\"${this._css.headerCounter}\">&nbsp; (+${dataAndUI.ui.length-1})</span>`;\n        }\n\n        if(this._settings.showIcon.toString() === \"false\") {\n            let img = this._getEle(\"img\", this._wrapper.headerContent);\n            if(img) {\n                this._hide(img);\n            }\n        }\n\n        this._setTitleMinHeight(false);\n\n    }\n\n    /**\n     * Find index By index prop\n     * @param index\n     * @return {null|*}\n     * @private\n     */\n    _findElementByIndexProp(index) {\n        let options = this._getAllEle(`ul li.${this._css.item}`, this._wrapper.holder);\n        let total = options.length;\n        for(let i=0;i<total;i++) {\n            let current = options[i];\n            if(current.index === index) {\n                return options[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Get data and value\n     * @param byIndex\n     * @return {{data: *, ui: *, index: *, option: *, multiple:boolean}}\n     * @private\n     */\n    _getDataAndUI(byIndex=null) {\n\n        let ele = this.ele;\n        let data, ui, option=null, index=-1;\n        let obj, $this=this;\n        let isArray = false;\n        let getByIndex = function(byIndex) {\n            let option = ele.options[byIndex];\n            let data = $this._parseOption(option);\n            let index = byIndex;\n            let ui = $this._findElementByIndexProp(index);\n            return {option, data, index, ui};\n        };\n\n        if(byIndex !== null) {\n            obj = getByIndex(byIndex);\n            option = obj.option;\n            data = obj.data;\n            index = obj.index;\n            ui = obj.ui;\n        } else {\n            ui = this._getAllEle(\"ul li.\" + this._css.itemSelected, this._wrapper.holder);\n\n            // if this is multiple\n            if (ui.length > 1) {\n                let data_a = [], opt_a = [], ind_a = [], ui_a = [];\n                for (let i = 0; i < ui.length; i++) {\n                    obj = getByIndex(ui[i].index);\n                    data_a.push(obj.data);\n                    opt_a.push(obj.option);\n                    ind_a.push(obj.index);\n                    ui_a.push(obj.ui);\n                }\n                data = data_a;\n                option = opt_a;\n                index = ind_a;\n                ui = ui_a;\n                isArray = true;\n            } else {\n                obj = getByIndex(ui[0]?.index || this.selectedIndex);\n                option = obj.option || null;\n                data = obj.data || null;\n                index = obj.index || -1;\n                ui = obj.ui || null;\n            }\n        }\n\n\n        return {data, ui, index, option, isArray};\n    }\n\n    /**\n     * Is Array\n     * @param obj\n     * @return {boolean}\n     * @private\n     */\n    _isArray = function(obj) {\n        return (Object.prototype.toString.call(obj) === \"[object Array]\");\n    };\n\n    /**\n     * Update Header UI by data\n     * @param byData\n     *\n     */\n    updateUiAndValue(byData=null) {\n        let dataAndUI = (byData === null) ? this.uiData : byData;\n        this._updateHeaderUI(dataAndUI);\n        let valueBox = this._wrapper.valueBox;\n        valueBox.value = this.ele.value;\n\n        //this is multiple\n        if(this._isMultiple && valueBox.name.substr(valueBox.name.length-2, valueBox.name.length) === \"[]\") {\n            this._wrapper.moreValueBox.innerHTML = \"\";\n            for (let i=1;i<dataAndUI.data.length;i++) {\n                let valueBoxM = this._createEle(\"input\", {type:\"hidden\", name:valueBox.name, value:dataAndUI.data[i].value});\n                this._wrapper.moreValueBox.appendChild(valueBoxM);\n            }\n        }\n    }\n\n    /**\n     * Update Ui by index\n     * @param index\n     * @private\n     */\n    _updateUiAndValueByIndex(index) {\n        let dataAndUI = this._getDataAndUI(index);\n        //this._updateHeaderUI(dataAndUI);\n        this.updateUiAndValue(dataAndUI);\n    }\n\n    /****  Elements and Helpers ****/\n    /**\n     * Create an element\n     * @param nm\n     * @param attr\n     * @param html\n     * @return {any}\n     * @private\n     */\n    _createEle(nm, attr, html) {\n        let tag = document.createElement(nm);\n        if (attr) {\n            for(let i in attr) {\n                if(i === \"style\") {\n                    tag.style.cssText = attr[i];\n                } else {\n                    tag[i]  = attr[i];\n                }\n            }\n        }\n        if (html) {\n            tag.innerHTML = html;\n        }\n        return tag;\n    }\n\n    /**\n     * Get one element\n     * @param ele\n     * @param where\n     * @return {*}\n     * @private\n     */\n    _getEle(ele, where=null) {\n        return (where === null) ? document.querySelector(ele) : where.querySelector(ele);\n    }\n\n    /**\n     * Get all elements\n     * @param ele\n     * @param where\n     * @return {any}\n     * @private\n     */\n    _getAllEle(ele, where=null) {\n        return where === null ? document.querySelectorAll(ele) : where.querySelectorAll(ele);\n    }\n\n    /**\n     * Get internal style of an element\n     * @param ele\n     * @return {string|*}\n     * @private\n     */\n    _getInternalStyle(ele) {\n        return (ele.style === undefined) ? \"\" : ele.style.cssText;\n    }\n\n    /**\n     * Toggle show\n     * @param ele\n     * @private\n     */\n    _toggleShow(ele) {\n        ele.style.display = (ele.style.display === \"none\" || ele.style.display === \"\") ? \"inherit\" : \"none\";\n    }\n\n    /**\n     * Show an element\n     * @param ele\n     * @private\n     */\n    _show(ele, dispaly=\"block\") {\n        ele.style.display = dispaly;\n    }\n\n    /**\n     * Hide an element\n     * @param ele\n     * @private\n     */\n    _hide(ele) {\n        ele.style.display = \"none\";\n    }\n\n    /**\n     * Insert an element after an element\n     * @param ele\n     * @param targetEle\n     * @return {*}\n     * @private\n     */\n    _insertAfter(ele, targetEle) {\n        return targetEle.parentNode.insertBefore(ele, targetEle.nextSibling);\n    }\n\n    /**\n     * Not using for now\n     * Insert an element before a target element\n     * @param ele\n     * @param targetEle\n     * @return {*}\n     * @private\n     */\n    _insertBefore(ele, targetEle) {\n        return targetEle.insertBefore(ele, targetEle);\n    }\n\n    /**\n     * get index of a li - not in used\n     * @param li\n     * @return {number}\n     * @private\n     */\n    _getIndex(li) {\n        let LIs = this._getAllEle(\"ul li\",this._wrapper.holder);\n        return [...LIs].indexOf(li);\n    }\n\n    /**\n     * Get properties or a property - not in used\n     * @param ele\n     * @param key\n     * @return {null|*}\n     * @private\n     */\n    _getProp(ele, key) {\n        let obj = {};\n        for (let i = 0; i < ele.attributes.length; i++) {\n            let k = ele.attributes[i].nodeName;\n            let v = ele.attributes[i].nodeValue;\n            if(key === k) {\n                return v;\n            }\n            obj[k] = v;\n        }\n        return (typeof key === \"undefined\") ? obj : null;\n    }\n\n    /**\n     * Get dataset\n     * @param ele\n     * @param key\n     * @return {*|null}\n     * @private\n     */\n    _getDataSet(ele, key=null) {\n        return (key === null) ? ele.dataset : ele.dataset[key] || null;\n    }\n\n    /**\n     * Bind an event\n     * @param ele\n     * @param type\n     * @param cb\n     * @private\n     */\n    _bindEvents(ele, type, cb) {\n        ele.addEventListener(type, cb);\n    }\n\n    /**\n     * Remove events\n     * @param ele\n     * @param type\n     * @param fn\n     * @private\n     */\n    _unbindEvents(ele, type, fn) {\n        ele.removeEventListener(type, fn);\n    }\n\n    /**\n     * Adjust child height\n     * @param row\n     * @private\n     */\n    _adjustChildHeight(row=null) {\n        row = (row === null) ? parseInt(this._settings.visibleRows) : row;\n        if(row !== null) {\n            let li = this._getEle(\"li[data-ms-index='0']\", this._wrapper.listOfItems);\n            let size = (this._settings.rowHeight !== null) ? this._settings.rowHeight : li.clientHeight;\n            this._wrapper.listOfItems.style.height = (row * size)+'px';\n        }\n\n    }\n\n    /**\n     * Set max height\n     * @param autoHeightByMax\n     * @private\n     */\n    _setTitleMinHeight(autoHeightByMax=true) {\n        let max = 0;\n        if(autoHeightByMax === true) {\n            let lis = this._getAllEle(\"li\", this._wrapper.listOfItems);\n            let len = lis.length;\n            for(let i=0;i<len;i++) {\n                let current = lis[i];\n                max = (current.clientHeight > max) ? current.clientHeight : max;\n            }\n        } else {\n            //this is after selection\n            max = this._wrapper.headerA.clientHeight;\n        }\n\n        this._wrapper.header.style.minHeight = max+\"px\";\n    }\n\n\n    /**\n     * Make Ui as list\n     * @param val\n     * @param row\n     * @private\n     */\n    _makeUiAsList(val, row) {\n        if(val === true) {\n            //make ui as list\n            //update height\n            this._hide(this._wrapper.header);\n            this.open(null, true);\n            this._adjustChildHeight(row);\n            this._wrapper.listOfItems.style.position = \"relative\";\n            this._wrapper.listOfItems.style.display = \"inline-block\";\n            this._wrapper.listOfItems.style.zIndex = 0;\n            this._wrapper.holder.style.zIndex = 0;\n            this._isList = true;\n        } else {\n            //reset to dropdown\n            this._show(this._wrapper.header);\n            this._wrapper.listOfItems.style.height = null;\n            this._wrapper.listOfItems.style.position = \"absolute\";\n            this._wrapper.listOfItems.style.zIndex = this._settings.zIndex;\n            this._wrapper.holder.style.zIndex = 0;\n            this._isList = false;\n            this.close(null);\n        }\n    }\n\n    /**\n     * Bind document events\n     * @param evt\n     * @private\n     */\n    _bindDocumentEvents(evt, documentClick=true, documentKeyDown=true) {\n\n        this._unbindDocumentEvents();\n\n        this._onDocumentClick = (evt) => {\n            //is outside?\n            let box = this._wrapper.listOfItems.getBoundingClientRect();\n            let headerBox = this._wrapper.header.getBoundingClientRect();\n            let areaX = box.left + box.width;\n            let areaY = (headerBox.top + box.height+headerBox.height);\n\n            if(evt.clientX < box.left || evt.clientX > areaX || evt.clientY < headerBox.y || evt.clientY > areaY) {\n                this.close(evt);\n            }\n        };\n\n        this._onDocumentKeyDown = (evt) => {\n            switch (evt.keyCode) {\n                case this._DOWN_ARROW:\n                case this._RIGHT_ARROW:\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    this._show(this._wrapper.listOfItems);\n                    this._isOpen = true;\n                    this.next();\n                    break;\n                case this._UP_ARROW:\n                case this._LEFT_ARROW:\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    this.previous();\n\n                    break;\n                case this._ESCAPE:\n                case this._ENTER:\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    this.close(null);\n                    break;\n                case this._SHIFT:\n                    this._shiftHolded = true;\n\n                    break;\n                case this._CONTROL:\n                case this._MAC_CONTROL:\n                    this._controlHolded = true;\n                    break;\n                case this._SPACE:\n                    this._show(this._wrapper.listOfItems);\n                    this._isOpen = true;\n                    break;\n                default:\n                    if (evt.keyCode >= this._ALPHABETS_START && this._isList === false && this._settings.enableAutoFilter.toString() === \"true\") {\n                        this._showHideFilterBox(true);\n                    }\n                    this._shiftHolded = false;\n                    this._controlHolded = false;\n                    break;\n            }\n        };\n\n        this._onDocumentKeyUp = (evt) => {\n            this._shiftHolded = false;\n            this._controlHolded = false;\n        };\n\n        if(documentClick === true) {\n            this._bindEvents(document, \"mouseup\", this._onDocumentClick);\n        }\n\n        if(documentKeyDown === true) {\n            this._bindEvents(document, \"keydown\", this._onDocumentKeyDown);\n            this._bindEvents(document, \"keyup\", this._onDocumentKeyUp);\n\n        }\n\n    }\n\n    /**\n     * Unbind document events\n     * @private\n     */\n    _unbindDocumentEvents() {\n        //remove events\n        if(this._onDocumentClick !== null) {\n            this._unbindEvents(document, \"mouseup\", this._onDocumentClick);\n        }\n        if(this._onDocumentKeyDown !== null) {\n            this._unbindEvents(document, \"keydown\", this._onDocumentKeyDown);\n        }\n        if(this._onDocumentKeyUp !== null) {\n            this._unbindEvents(document, \"keyup\", this._onDocumentKeyUp);\n        }\n\n\n        this._onDocumentClick = null;\n        this._onDocumentKeyDown = null;\n        this._onDocumentKeyUp = null;\n    }\n\n    /**\n     * Scroll if needed\n     * @param item\n     * @param pos\n     * @param goingWhere\n     * @private\n     */\n    _scrollToIfNeeded(item=null, pos=null, goingWhere=\"next\") {\n        let child = this._wrapper.listOfItems;\n        let childBound = child.getBoundingClientRect();\n        if(item === null && pos !== null) {\n            child.scrollTop = pos;\n        }\n        //if scroll is needed\n        item = (item !== undefined) ? item : this._getEle( \"li.\" + this._css.itemSelected);\n        if (item) {\n            let itemPos = item.offsetTop;\n            let ch = child.clientHeight;\n            let itemHeight = (item.clientHeight); //for next\n\n            if ((itemPos+itemHeight) - child.scrollTop > ch && goingWhere==='next') {\n                child.scrollTop = (itemPos+itemHeight) - ch;\n            } else if((itemPos - child.scrollTop) < 0   && goingWhere==='previous') {\n                child.scrollTop = (itemPos);\n            }\n        }\n    }\n\n    /**\n     * Fire event that is bind on settings\n     * @param evt_n\n     * @private\n     */\n    _fireLocalEventIfExist(evt_n, data=null) {\n        if (typeof this._settings.on[evt_n] === \"function\") {\n            let dataAndUI = (data===null) ? this._getDataAndUI() : data;\n            let fn = this._settings.on[evt_n];\n            try {\n                fn(dataAndUI);\n            } catch (e) {\n                console.error(e.message);\n            }\n\n        }\n    }\n\n    /**\n     * Fire event if exist\n     * @param evt_n\n     * @return {boolean}\n     * @private\n     */\n    _fireEventIfExist(evt_n) {\n        //data event\n        if(this.ele.dataset[evt_n]) {\n            let fn = new Function(this.ele.dataset[evt_n]);\n            try {\n                fn();\n            } catch (e) {\n                console.error(e.message);\n            }\n        }\n\n        //check if original has some\n        if (this._has_handler(evt_n).hasEvent) {\n            if (this._has_handler(evt_n).byElement) {\n                try {\n                    this.ele[evt_n]();\n                } catch (e) {\n                    try {\n                        this.ele[\"on\" + evt_n]();\n                    }catch (e2) {\n                        \n                    }\n                }\n\n            } else if (this._has_handler(evt_n).byJQuery) {\n                switch (evt_n) {\n                    case \"keydown\":\n                    case \"keyup\":\n                            //key down/up will check later\n                        break;\n                    default:\n                        try {\n                            if(typeof jQuery !== \"undefined\") {\n                                jQuery(this.ele).triggerHandler(evt_n);\n                            }\n                        } catch (e) {\n                            //silence is bliss\n                        }\n\n                        break;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Has any event\n     * @param name\n     * @return {{byJQuery: boolean, hasEvent: boolean, byElement: boolean}}\n     * @private\n     */\n    _has_handler(name) {\n        //True if a handler has been added in the html.\n        let evt = {byElement: false, local:false, byJQuery: false, hasEvent: false};\n\n        if (this._settings.on[name] !== null) {\n            evt.hasEvent = true;\n            evt.local = true;\n        }\n\n        //console.log(name)\n        try {\n            //console.log(obj.prop(\"on\" + name) + \" \"+name);\n            if (this._getProp(this.ele, \"on\" + name) !== null) {\n                evt.hasEvent = true;\n                evt.byElement = true;\n            }\n        } catch(e) {\n            //console.log(e.message);\n        }\n        // True if a handler has been added using jQuery.\n        if(typeof jQuery !== \"undefined\") {\n            let obj = jQuery(this.ele);\n            let evs;\n            if (typeof jQuery?._data === \"function\") { //1.8\n                evs = jQuery?._data(this.ele, \"events\");\n            } else {\n                evs = obj.data(\"events\");\n            }\n            if (evs && evs[name]) {\n                evt.hasEvent = true;\n                evt.byJQuery = true;\n            }\n        }\n        return evt;\n    }\n\n    /*****************  Public methods and props *********** /\n     /**\n     * Add an item to select\n     * Object can be pass as below\n     * new Option(\"Label\", \"value\") or\n     * {text:\"Label\", value:\"value\"}\n     * or Label as string\n     * or full object ie {text:\"\", value:\"\", description:'', image:'', className:'' title:'', imageCss:''}\n     * @param obj\n     * @param index\n     */\n\n    add(obj, index=null) {\n        //\n        let text, value, title, image, description, imageCss;\n        let opt;\n        if(obj instanceof HTMLOptionElement) {\n            opt = obj;\n        } else if(typeof obj === \"string\") {\n            //passing as string\n            text = value = obj;\n            opt = new Option(text, value);\n        } else if(obj instanceof Object) {\n            text = obj.text || '';\n            value = obj.value || text;\n            title = obj.title || '';\n            image = obj.image || '';\n            imageCss = obj.imageCss || '';\n            description = obj.description || '';\n            opt = new Option(text, value);\n            opt.setAttribute(\"data-description\", description);\n            opt.setAttribute(\"data-image\", image);\n            opt.setAttribute(\"data-title\", title);\n            opt.setAttribute(\"data-image-css\", imageCss);\n        }\n        this.ele.add(opt, index);\n        this._makeChildren();\n        this._fireLocalEventIfExist(\"add\");\n    }\n\n    /**\n     * Remove an item from select\n     * @param index\n     */\n    remove(index) {\n        let uiAndData = this._getDataAndUI(index);\n        this.ele.remove(index);\n        this._makeChildren();\n        this._fireLocalEventIfExist(\"remove\", uiAndData);\n        return uiAndData;\n    }\n\n    /**\n     * Move to next index\n     */\n    next() {\n        let $this = this;\n        let allOptions = this.optionsUI;\n        let totalOpt = allOptions.length;\n        let counterStart;\n        if(this._isFilterApplied) {\n            counterStart = this._nexPrevCounter;\n        } else {\n            counterStart = this.selectedIndex;\n        }\n\n        let _getNextElem = function() {\n            let i = counterStart;\n            for(i;i<totalOpt;i++) {\n                let next = i+1;\n                next = next >= totalOpt ? totalOpt-1 : next;\n                $this._nexPrevCounter++;\n                if(!allOptions[next].classList.contains($this._css.itemDisabled)) {\n                    return allOptions[next];\n                }\n            }\n            return null;\n        };\n\n        if(totalOpt > 0) {\n            let nextEle = _getNextElem();\n            if(nextEle) {\n                this._setSelectedByItem(nextEle, false, true);\n                this._scrollToIfNeeded(nextEle);\n            }\n        }\n\n    }\n\n    /**\n     * Move to previous index\n     */\n    previous() {\n        let $this = this;\n        let allOptions = this.optionsUI;//$this._getAllEle(`li.${$this._css.item}`, $this._wrapper.listOfItems);\n        let totalOpt = allOptions.length;\n        let counterStart;\n        if(this._isFilterApplied) {\n            counterStart = this._nexPrevCounter;\n        } else {\n            counterStart = this.selectedIndex;\n        }\n        let _getPreviousElem = function(ele) {\n            let i = counterStart;\n            for(i;i>0;i--) {\n                let next = i-1;\n                next = next >= 0 ? next: 0;\n                $this._nexPrevCounter--;\n                if(!allOptions[next].classList.contains($this._css.itemDisabled)) {\n                    return allOptions[next];\n                }\n            }\n            return null;\n        };\n\n        if(allOptions.length > 0) {\n            let prevEle = _getPreviousElem();\n            if(prevEle) {\n                this._setSelectedByItem(prevEle, false, true);\n                this._scrollToIfNeeded(prevEle, null,\"previous\");\n            }\n        }\n\n    }\n\n    /**\n     * Open this dropdown\n     */\n    open(evt, justOpen=false) {\n\n        if (this.disabled) {\n            return;\n        }\n        if(!this._isOpen) {\n            this._isOpen = true;\n            this._show(this._wrapper.listOfItems);\n\n            //don't bind event if just opening - useful when making as list\n            if(justOpen === false) {\n                this._bindDocumentEvents(evt);\n            }\n            //Change arrow\n            this._wrapper.arrow.classList.remove(this._css.arrowDown);\n            this._wrapper.arrow.classList.add(this._css.arrowUp);\n            this._adjustChildHeight();\n            this._scrollToItem();\n\n            this._fireLocalEventIfExist(\"open\");\n\n        } else {\n            this.close(null);\n        }\n    }\n\n    /**\n     * Close this dropdown\n     * @param evt\n     */\n    close(evt) {\n        let isList = this._isList;\n        let isDisable = false; // clicking on disabled list - it can be true based on below statement\n\n        if(evt !== null) {\n            evt.stopImmediatePropagation();\n            let li = evt.target.closest('li');\n            isDisable = (li !== null) ? li.classList.contains(\"disabled\") : false;\n        }\n\n        if (this.disabled || isList || isDisable) {\n            return;\n        }\n        this._scrollToIfNeeded(null, 0);\n        this._hide(this._wrapper.listOfItems);\n        this._wrapper.arrow.classList.add(this._css.arrowDown);\n        this._wrapper.arrow.classList.remove(this._css.arrowUp);\n\n        //reset few things\n        this._isOpen = false;\n        this._isMouseDown = false;\n        this._shiftHolded = false;\n        this._controlHolded = false;\n        this._isFilterApplied = false;\n        this._wrapper.filterInput.value = \"\";\n        this._wrapper.filterInput.blur();\n        if(this._settings.showFilterAlways.toString() === \"false\") {\n            this._showHideFilterBox(false);\n        }\n        this._applyFilters()\n        this._unbindDocumentEvents();\n\n        this._updateHeaderUI();\n\n        //reset list if required\n        if(this.ele.length !== this._getAllEle(`li.${this._css.item}`, this._wrapper.listOfItems).length) {\n            this._makeChildren();\n            this.updateUiAndValue();\n        }\n\n        this._fireLocalEventIfExist(\"close\");\n\n    }\n\n    /**\n     * Return named item element with data\n     * @param name\n     * @param withData\n     */\n    namedItem(name, withData=false) {\n        let obj = null;\n        let ele = this.ele.querySelector(`option[name='${name}']`);\n        if(ele && withData) {\n            obj = {};\n            let data = this._parseOption(ele);\n            obj.option = ele;\n            obj.data = data;\n        } else {\n            obj = ele;\n        }\n        return obj;\n    }\n\n    /**\n     * Get data by index\n     * @param index\n     * @param withData\n     */\n    item(index, withData=false) {\n        let obj = null;\n        let ele = this.ele.options[index];\n        if(ele && withData) {\n            obj = {};\n            let data = this._parseOption(ele);\n            obj.option = ele;\n            obj.data = data;\n        } else {\n            obj = ele;\n        }\n        return obj;\n    }\n\n    /**\n     * Show hide or get status of visibility\n     * @param isShow\n     * @return {boolean}\n     */\n    visible(isShow=null) {\n\n        if(isShow === true) {\n            this._show(this._wrapper.holder, \"inline-block\");\n        } else if(isShow === false) {\n            this._hide(this._wrapper.holder);\n        }\n        if(isShow === null) {\n            return (this._wrapper.holder.style.display !== \"none\");\n        }\n    }\n\n    /**\n     * Calculate item height and set child height\n     * @param numberOfRows\n     */\n    showRows(numberOfRows) {\n        this._settings.visibleRows = (numberOfRows > this.length) ? this.length : numberOfRows;\n        this._adjustChildHeight();\n    }\n\n    /**\n     * Alias of showRows - undecided\n     * @param numberOfRows\n     */\n    visibleRows(numberOfRows) {\n        this.showRows(numberOfRows);\n    }\n\n    /**\n     * Add event listener\n     * @param type\n     * @param fn\n     */\n    on(type, fn) {\n       //this._bindEvents(this.ele, type, fn);\n        this._settings.on[type] = fn;\n    }\n\n    /**\n     * Remove event listener\n     * @param type\n     * @param fn\n     */\n    off(type, fn) {\n        //this._unbindEvents(this.ele, type, fn);\n        this._settings.on[type] = null;\n    };\n\n    /**\n     * Remake Everything\n     */\n    refresh() {\n        this._makeChildren();\n        this.updateUiAndValue();\n    }\n\n    /**\n     * Destroy UI\n     */\n    destroy() {\n        //show original\n        this._show(this.ele);\n        this.ele.required = this._wrapper.valueBox.required;\n        this.ele.name = this._wrapper.valueBox.name;\n        this._wrapper.holder.parentNode.removeChild(this._wrapper.holder);\n    }\n\n\n    /*** Props ***/\n    /**\n     * Get selected index\n     * @return {*}\n     */\n    get selectedIndex() {\n        return this.ele.selectedIndex;\n    }\n\n    /**\n     * Set Index\n     * @param index\n     */\n    set selectedIndex(index) {\n        let $this = this;\n        let selectNow = function (ind) {\n            $this.ele.selectedIndex = ind;\n            if(ind === -1) {\n                //blank\n                $this._updateHeaderUI(null, \"\");\n                $this._removeOldSelected();\n            } else {\n                $this._setSelectedByOptionItem($this.ele.options[ind]);\n            }\n        };\n        \n        if(index < this.length && !this._isArray(index)) {\n            selectNow(index);\n        } else {\n            if(this._isMultiple  && this._isArray(index)) {\n                for (let i=0,len=index.length;i<len;i++) {\n                    if(index[i] < this.length && index[i] !== -1) {\n                        this._setSelectedByOptionItem(this.ele.options[index[i]], i>0);\n                    }\n                }\n                this._updateHeaderUI(null);\n            } else {\n                selectNow(index);\n            }\n        }\n\n    }\n\n    /**\n     * Get options\n     * @return {*}\n     */\n    get options() {\n        return this.ele.options;\n    }\n\n    /**\n     * Set options length\n     * @param option\n     */\n    set options(option) {\n\n        if(option instanceof HTMLOptionElement) {\n            this.ele.add(option);\n            this._makeChildren();\n            this.updateUiAndValue();\n        } else if (typeof option === \"number\") {\n            this.ele.length = option;\n            this._makeChildren();\n            this.updateUiAndValue();\n        }\n    }\n\n    /**\n     * get options UI\n     * @return {any}\n     */\n    get optionsUI() {\n        if(this._cacheEle[\"allItems\"]) {\n           //return this._cacheEle[\"allItems\"];\n        }\n        return this._cacheEle[\"allItems\"] = this._getAllEle(`li.${this._css.item}`, this._wrapper.listOfItems);\n    }\n\n    /**\n     * Get length\n     * @return {*}\n     */\n    get length() {\n        return this.ele.length;\n    }\n\n    /**\n     * Set length\n     * @param size\n     */\n    set length(size) {\n        this.ele.options.length = size;\n        this._makeChildren();\n        this.updateUiAndValue();\n    }\n\n\n    /**\n     * Get value\n     * @return {*}\n     */\n    get value() {\n        return this.ele.value;\n    }\n\n    /**\n     * Set value\n     * @param val\n     */\n    set value(val) {\n        this.ele.value = val;\n        this.selectedIndex = this.ele.selectedIndex;\n    }\n\n    /**\n     * get selected text\n     * @return {string}\n     */\n    get selectedText() {\n        return ( this.selectedIndex >=0 ) ? this.ele.options[this.selectedIndex].text : \"\"\n    }\n\n    /**\n     * Check if this is disabled\n     * @return {boolean | * | Function}\n     */\n    get disabled() {\n        return this.ele.hasAttribute('disabled');\n    }\n\n    /**\n     * Set disabled\n     * @param val\n     */\n    set disabled(val) {\n        if (val) {\n            this.ele.setAttribute('disabled', '');\n            this._wrapper.holder.classList.add(this._css.wrapperDisabled);\n        } else {\n            this.ele.removeAttribute('disabled');\n            this._wrapper.holder.classList.remove(this._css.wrapperDisabled);\n        }\n    }\n\n    /**\n     * Get form name if this is inside a form\n     * @return {*}\n     */\n    get form() {\n        return this.ele.form;\n    }\n\n\n    /**\n     * Get multiple\n     * @return {*}\n     */\n    get multiple() {\n        return this.ele.multiple;\n    }\n\n    /**\n     * Set multiple\n     * @param val\n     */\n    set multiple(val) {\n        if (val) {\n            this.ele.setAttribute('multiple', '');\n            this._enableCheckbox = this._settings.enableCheckbox;\n        } else {\n            this.ele.removeAttribute('multiple');\n        }\n        this._isMultiple = val;\n        //reset if this is not multiple\n        if(!val) {\n            this.selectedIndex = this.ele.selectedIndex;\n            this._enableCheckbox = false;\n        }\n        this._makeChildren();\n    }\n\n    /**\n     * Get the name\n     * @return {*}\n     */\n    get name() {\n        if(this._wrapper?.valueBox) {\n            return this._wrapper.valueBox.name || \"\";\n        }\n        return this.ele.name;\n    }\n\n    /**\n     * Set the name\n     * @param val\n     */\n    set name(val) {\n\n        if(this._wrapper?.valueBox) {\n            this._wrapper.valueBox.name = val;\n        } else {\n            this.ele.name = val;\n        }\n\n\n    }\n\n    /**\n     * Get required\n     * @return {*}\n     */\n    get required() {\n        return this._wrapper.valueBox.required;\n    }\n\n    /**\n     * Set required\n     * @param val\n     */\n    set required(val) {\n        if (val) {\n            this._wrapper.valueBox.setAttribute('required', true);\n            //update now\n        } else {\n            this._wrapper.valueBox.removeAttribute('required');\n        }\n    }\n\n    /**\n     * return the size/height of the dropdown\n     * @return {*}\n     */\n    get size() {\n        return this.ele.size;\n    }\n\n    /**\n     * Change the height of the element\n     * @param val\n     */\n    set size(val) {\n        this.ele.size = val;\n        this._makeUiAsList(val > 1, val);\n    }\n\n\n    /**\n     * Get selected option\n     * @return {null}\n     */\n    get selectedOptions() {\n        let selectedOptions = null;\n        if(this.selectedIndex >=0 ) {\n            selectedOptions = this.ele.options[this.selectedIndex];\n            if(this.multiple) {\n                selectedOptions = [];\n                let options = this.options;\n                let total = options.length;\n                for (let i=0; i<total; i++) {\n                    if(options[i].selected) {\n                        selectedOptions.push(options[i])\n                    }\n                }\n                selectedOptions = selectedOptions.length === 1 ? selectedOptions[0] : selectedOptions;\n            }\n        }\n        return selectedOptions;\n    }\n\n    /**\n     * Get element children\n     * @return {*}\n     */\n    get children() {\n        return this.ele.children;\n    }\n\n    /**\n     * Get selected ui data\n     * @return {{data: *, ui: *, index: *, option: *}}\n     */\n    get uiData() {\n        return this._getDataAndUI();\n    }\n\n    /**\n     * Get version\n     * @return {string}\n     */\n    get version() {\n        return \"4.0.3\";\n    }\n\n}\n\n\n\n//# sourceURL=webpack://ms-dropdown/./src/js/lib/ddmaker.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ })()
;